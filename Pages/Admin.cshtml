@page
@using System.IO.Compression;
@model UploadProject.Pages.AdminModel
@{
}



<div class="d-flex flex-column w-100">
    <h1 class="mt-5">Admin</h1>
    <div class="d-flex flex-row-reverse bd-highlight">
        <div class="p-2 bd-highlight">
            <a class="btn btn-primary" data-bs-toggle="collapse" href="#collapseTestProjects" role="button" aria-expanded="true" aria-controls="collapseTestProjects">
                Test Projects
            </a>
        </div>
        <div class="p-2 bd-highlight">
            <a class="btn btn-primary" data-bs-toggle="collapse" href="#collapseExample" role="button" aria-expanded="true" aria-controls="collapseExample">
                <i class="bx bx-upload me-2"></i>
                Upload Test Project
            </a>
        </div>
    </div>

    <div class="collapse my-2" id="collapseExample">
        <form method="post" enctype="multipart/form-data">
            <input class="visually-hidden" type="text" asp-for="AdminID" value="@Model.Admin.ID" />
            <div class="card card-body">
                <div class="row align-items-center">
                    <div class="col">
                        <p>Session Name</p>
                        <input class="form-control" asp-for="SessionName" autocomplete="on" aria-required="true" placeholder="Session Name" required />
                    </div>
                </div>
                <div class="row align-items-center mt-3">
                    <div class="col">
                        <p>Choose Test Project</p>
                        <input class="form-control" asp-for="UploadedFile" type="file" accept=".zip" required />
                    </div>
                    <div class="col">
                        <p>Day Number</p>
                        <input asp-for="DayNumber" class="form-control" min="1" type="number" max="10" required />
                    </div>
                </div>
                <div class="row align-items-center mt-3">
                    <div class="col">
                        <p>Start Date</p>
                        <input asp-for="StartDate" class="form-control" type="datetime-local" required />
                    </div>
                    <div class="col">
                        <p>End Date</p>
                        <input asp-for="EndDate" class="form-control" type="datetime-local" required />
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col">
                        <button class=" btn btn-secondary" type="submit" value="add">
                            <i class="bx bx-upload me-2"></i>
                            Upload
                        </button>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <div class="collapse my-2" id="collapseTestProjects">
        <div class="card card-body">
            <table class="my-0 table table-striped table-hover">
                <thead>
                    <tr>
                        <th scope="col">Test Poject Zip</th>
                        <th scope="col">Start Date</th>
                        <th class="text-center" scope="col">Action</th>
                    </tr>
                </thead>

                <tbody class="table-group-divider">
                    @foreach (var item in Model.CompetitionSessions)
                    {
                        <tr>
                            <th>@item.Name</th>
                            <td>@item.StartDateTime.ToString("dd MMMM yyyy HH:mm tt")</td>
                            <form method="post">
                            <td class="text-center">
                                <input class="visually-hidden" type="text" asp-for="ModuleID" value="@item.ID" />
                                    @*<Button class="btn btn-warning" type="submit" name="action" value="edit">Edit</Button>*@
                                    @*<Button class="btn btn-danger" type="submit" name="action" value="delete">Delete</Button>*@
                                <Button class="btn btn-success" type="submit" name="action" value="download">Download</Button>
                            </td>
                            </form>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="card" id="top-section">
        <div class="card-body">
            @{
                var data = Model._db.CompetitionSessions.OrderBy(x => x.DayNumber).ThenBy(x => x.StartDateTime).ToList();
                var hasCurrent = data.Any(x => x.StartDateTime <= DateTime.Now && DateTime.Now <= x.EndDateTime);
                int loop = 0;
            }
            <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
                @foreach (var session in data)
                {
                    var isActive = hasCurrent ? (session.StartDateTime <= DateTime.Now && DateTime.Now <= session.EndDateTime) : loop == 0;
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(isActive ? "active" : "")" data-bs-toggle="pill" data-bs-target="@("#pills-" + session.ID.ToString())" type="button" role="tab" aria-controls="pills-contact" aria-selected="false">@("D" + session.DayNumber) @session.Name</button>
                    </li>
                    loop++;
                }
            </ul>
            <div class="tab-content">
                @{
                    loop = 0;
                }
                @foreach (var session in data)
                {
                    var isActive = hasCurrent ? (session.StartDateTime <= DateTime.Now && DateTime.Now <= session.EndDateTime) : loop == 0;
                    <div class="tab-pane fade @(isActive ? "show active" : "")" id="@("pills-" + session.ID.ToString())" role="tabpanel">
                        <div>
                            <span>@session.StartDateTime - @session.EndDateTime</span>
                            <button class="btn btn-outline-secondary my-1 mx-2 btn-sm" data-bs-toggle="modal" data-bs-target="#edit-modal-@session.ID">Edit</button>
                            <div class="modal fade" id="edit-modal-@session.ID" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered">
                                    <form method="post">
                                        <input class="visually-hidden" type="text" asp-for="ModuleID" value="@session.ID" />
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="editModalLabel">Edit Time</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                <div class="row align-items-center mt-3">
                                                    <div class="col">
                                                        <p>Start Date</p>
                                                        <input asp-for="StartDate" class="form-control" type="datetime-local" required value="@session.StartDateTime.ToString("yyyy-MM-ddTHH:mm")" />
                                                    </div>
                                                    <div class="col">
                                                        <p>End Date</p>
                                                        <input asp-for="EndDate" class="form-control" type="datetime-local" required value="@session.EndDateTime.ToString("yyyy-MM-ddTHH:mm")" />
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                                <button type="submit" class="btn btn-primary" name="action" value="editDatetime">Save changes</button>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                        @if (DateTime.Now <= session.EndDateTime)
                        {
                            <h4 id="timeOut" style="" class="text-center"></h4>
                            <style>
                                #timeOut {
                                    font-size: 70pt;
                                    font-family: consolas, monospace;
                                    font-optical-sizing: auto;
                                    font-weight: 100;
                                    font-style: normal;
                                }
                            </style>
                            <script type="text/javascript">
                                const timeout = document.getElementById("timeOut");
                                const dueTime = new Date("@((DateTime.Now < session.StartDateTime ? session.StartDateTime : session.EndDateTime).ToString("yyyy-MM-dd HH:mm:ss"))");
                                const needReload = @(DateTime.Now < session.StartDateTime ? "true" : "false");
                                const countdown = setInterval(() => {
                                    const now = new Date();

                                    const dist = dueTime - now;
                                    if (dist <= 0) {
                                        clearInterval(countdown);
                                        if (needReload) {
                                            window.location.reload();
                                        }
                                        timeout.innerHTML = "EXPIRED!";
                                        return;
                                    }
                                    //timeout.innerHTML = "" + ;

                                    const days = Math.floor(dist / (1000 * 60 * 60 * 24));
                                    const hours = Math.floor((dist % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                                    const minutes = Math.floor((dist % (1000 * 60 * 60)) / (1000 * 60));
                                    const seconds = Math.floor((dist % (1000 * 60)) / 1000).toString();
                                    const miliseconds = Math.floor(dist % 1000 / 10).toString().padStart(2, 0);

                                    // Display the result in the element with id="demo"
                                    timeout.innerHTML = `${dist > (1000 * 60 * 60 * 24) ? (days + "d ") : ""}${dist > (1000 * 60 * 60) ? hours + ":" : ""}${dist > (1000 * 60) ? minutes + ":" : ""}${dist > 10 * 1000 ? seconds.padStart(2, 0) : seconds}.${miliseconds}`;
                                }, 10)
                            </script>
                        }
                        <div class="row">
                            @for (int i = 0; i < 5; i++)
                            {
                                <div class="col">
                                    <ul class="list-group mt-2">
                                        @foreach (var index in Enumerable.Range(i * 10 + 1, 10))
                                        {
                                            var username = $"PC{index:00}";
                                            <li class="list-group-item d-flex justify-content-between align-items-start @(index%2==0?"list-group-item-dark" : "")">
                                                <div>
                                                    <a class="text-decoration-none" href="#answer-@username"> @username </a>
                                                </div>
                                                @try
                                                {
                                                    var upload = Model._db.CompetitorUploadedFiles.OrderByDescending(x => x.CreatedAt).FirstOrDefault(a => a.User.Username == $"PC{index:00}" && a.CompetitionSessionID == session.ID);
                                                    if (upload != null)
                                                    {
                                                        using var zipfile = ZipFile.OpenRead(System.IO.Path.Combine(Directory.GetCurrentDirectory(), "File", upload.FileName));
                                                        <span class="badge bg-primary rounded-pill" title="@upload?.CreatedAt">@zipfile.Entries.Count</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-warning rounded-pill">0</span>
                                                    }
                                                }
                                                catch (FileNotFoundException)
                                                {
                                                    <span class="badge bg-danger rounded-pill">File Not Found</span>
                                                }
                                                catch (InvalidDataException)
                                                {
                                                    <span class="badge bg-danger rounded-pill">Invalid File Format</span>
                                                }
                                                catch (NullReferenceException)
                                                {
                                                    <span class="badge bg-warning rounded-pill">0</span>
                                                }
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                        <div class="mt-3">
                            <form method="post">
                                <input class="visually-hidden" type="text" asp-for="ModuleID" value="@session.ID" />
                                <Button class="btn btn-success w-100" type="submit" name="action" value="downloadAnswer">Download Answer @("D" + session.DayNumber) @session.Name</Button>
                            </form>
                        </div>
                    </div>
                    loop++;
                }
            </div>
        </div>
    </div>


    @foreach (var user in Model.Users)
    {
        <div class="card mt-3" id="answer-@user.Username">
            <div class="card-body">
                <a class="d-flex align-items-center justify-content-between text-decoration-none text-black" data-bs-toggle="collapse" href="#collapseHistory-@(user.ID)" role="button" aria-expanded="true">
                    <h5>@user.Username</h5>
                    <i class="bx bx-chevron-down fs-4 text-primary"></i>
                </a>
                <div class="collapse show mt-3 " id="collapseHistory-@(user.ID)">
                    @{
                        var competitionDayList = Model.CompetitionSessions.GroupBy(x => x.DayNumber).Select(x => new
                        {
                            DayNumber = x.Key,
                            Sessions = x.Select(y => new
                            {
                                y.ID,
                                y.Name,
                                y.StartDateTime,
                                y.EndDateTime
                            }).OrderBy(y => y.StartDateTime).ToList()
                        }).ToList();

                        for (int i = 0; i < competitionDayList.Count; i++)
                        {
                            var competitionDay = competitionDayList[i];

                            <div class="card mt-3">
                                <div class="card-body">
                                    <a class="d-flex align-items-center justify-content-between text-decoration-none text-black" data-bs-toggle="collapse" href="#collapseDay-@(user.ID)-@(competitionDay.DayNumber)" role="button" aria-expanded="true" aria-controls="collapseDay@(competitionDay.DayNumber)">
                                        <span>Day @competitionDay.DayNumber</span>
                                        <i class="bx bx-chevron-down fs-4 text-primary"></i>
                                    </a>

                                    <div class="collapse mt-3" id="collapseDay-@(user.ID)-@(competitionDay.DayNumber)">
                                        @foreach (var session in competitionDay.Sessions)
                                        {
                                            var competitorUploadedFile = Model.CompetitorUploadedFiles.Where(x => x.CompetitionSessionID == session.ID && x.UserID == user.ID).OrderByDescending(x => x.CreatedAt).FirstOrDefault();

                                            <div class="ms-3 mb-3">
                                                <p class="fw-bold">
                                                    @session.Name
                                                    <span class="text-muted fw-normal">(@session.StartDateTime.ToString("dd MMM yyyy HH:mm") - @session.EndDateTime.ToString("dd MMM yyyy HH:mm"))</span>
                                                </p>

                                                @if (competitorUploadedFile != null)
                                                {
                                                    var listExtract = Model.CompetitorAnswerHistory.Where(x =>
                                                    x.CompetitionSessionID == competitorUploadedFile.CompetitionSessionID
                                                    &&
                                                    x.UserId == user.ID
                                                    ).FirstOrDefault()?.UploadedFileZipExtractList;

                                                    <div class="d-flex justify-content-between ms-3 pe-3">
                                                        <span class="d-inline-flex">@competitorUploadedFile.FileName</span>
                                                        <span class="d-inline-flex text-muted fst-italic">Last Uploaded (@competitorUploadedFile.CreatedAt)</span>
                                                    </div>

                                                    <div class="ms-3 mt-3">
                                                        <ul class="list-group mt-2 me-3">
                                                            @foreach (var itemExtract in listExtract)
                                                            {
                                                                <li class="mb-0 list-group-item">@itemExtract</li>
                                                            }
                                                        </ul>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="row ms-3">
                                                        <span class="text-muted fw-light fst-italic">No history</span>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    }

    @if (TempData["alertMessage"] != null)
    {
        <script>
            alert('@TempData["alertMessage"]');
        </script>
    }
    <div id="goto-top" style="position:fixed; bottom: 10px; right: 30px;">
        <a class="btn btn-outline-primary" href="#top-section">Go top</a>
    </div>
    <script>
        const topSection = document.getElementById("top-section"),
            element = document.getElementById("goto-top"),
            lastScrollTop = topSection.offsetTop + topSection.offsetHeight;
        window.addEventListener("scroll", function () {
            const currentScroll = window.pageYOffset || document.documentElement.scrollTop;

            if (currentScroll > lastScrollTop) {
                // Scroll ke bawah, tampilkan elemen
                element.style.display = "block";
            } else {
                // Scroll ke atas, sembunyikan elemen
                element.style.display = "none";
            }
        });

    </script>
</div>