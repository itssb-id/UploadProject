@page
@using System.IO.Compression;
@model UploadProject.Pages.CompetitorModel
@{

}

<div class="d-flex w-100">
    <div class="row w-100">
        <div class="col-lg-12">
            <h1>Competitor - @Model.Competitor?.Username</h1>
            @{
                var currSession = Model._db.CompetitionSessions.OrderBy(x => x.StartDateTime).FirstOrDefault(x => x.StartDateTime <= DateTime.Now && DateTime.Now <= x.EndDateTime);

                if (currSession != null)
                {
                    <h2>Current Session: @("D" + currSession.DayNumber) @currSession.Name</h2>
                    <div class="d-flex justify-content-between">
                        <h4>@currSession.StartDateTime.ToString("dd MMM yyyy HH:mm") - @currSession.EndDateTime.ToString("dd MMM yyyy HH:mm")</h4>
                        <h4 id="timeOut"></h4>
                        <script type="text/javascript">
                            const timeout = document.getElementById("timeOut");
                            const dueTime = new Date("@currSession.EndDateTime.ToString("yyyy-MM-dd HH:mm:ss")");
                            const countdown = setInterval(() => {
                                const now = new Date();

                                const dist = dueTime - now;
                                if (dist <= 0) {
                                    clearInterval(countdown);
                                    timeout.innerHTML = "EXPIRED!";
                                    return;
                                }
                                //timeout.innerHTML = "" + ;

                                const days = Math.floor(dist / (1000 * 60 * 60 * 24));
                                const hours = Math.floor((dist % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                                const minutes = Math.floor((dist % (1000 * 60 * 60)) / (1000 * 60));
                                const seconds = Math.floor((dist % (1000 * 60)) / 1000);

                                // Display the result in the element with id="demo"
                                timeout.innerHTML = `${dist > (1000 * 60 * 60 * 24) ? (days + "d ") : ""}${dist > (1000 * 60 * 60) ? hours + "h " : ""}${dist > (1000 * 60) ? minutes + "m " : ""}${seconds}s`;
                            }, 1000)
                        </script>
                    </div>
                    <p class="mt-3 text-black-50">Download the test projects here</p>

                    <form method="post">
                        <input class="form-control visually-hidden" asp-for="CompetitorID" type="text" value="@Model.Competitor?.ID" required>
                        <input class="form-control visually-hidden" asp-for="Action" type="text" value="DownloadTP" required>
                        <button class="btn btn-primary" type="submit">
                            <i class="bx bx-download me-2"></i>
                            Download Test Project
                        </button>
                    </form>

                    <p class="mt-5 fw-bold">Upload Answers</p>
                    <form method="post" enctype="multipart/form-data">
                        <div class="d-flex align-items-center">
                            <div class="d-inline-flex flex-grow-1">
                                <input class="form-control visually-hidden" asp-for="CompetitorID" type="text" value="@Model.Competitor?.ID" required>
                                <input class="form-control visually-hidden" asp-for="Action" type="text" value="UploadAnswer" required>
                                <input class="form-control me-3" asp-for="UploadedFile" type="file" accept=".zip" required>
                            </div>
                            <div class="d-inline-flex">
                                <button class=" btn btn-secondary" type="submit"><i class="bx bx-upload me-2"></i>Upload</button>
                            </div>
                        </div>
                    </form>
                }
                else
                {
                    var nextSession = Model._db.CompetitionSessions.OrderBy(x => x.StartDateTime).FirstOrDefault(x => DateTime.Now <= x.StartDateTime);
                    if (nextSession != null)
                    {
                        <h2>
                            Next Session: @("D" + nextSession.DayNumber) @nextSession.Name
                        </h2>
                        <div class="d-flex justify-content-between">
                            <h4>@nextSession.StartDateTime.ToString("dd MMM yyyy HH:mm") - @nextSession.EndDateTime.ToString("dd MMM yyyy HH:mm")</h4>
                            <h4 id="timeOutNext"></h4>
                            <script type="text/javascript">
                                const timeout = document.getElementById("timeOutNext");
                                const dueTime = new Date("@nextSession.StartDateTime");
                                const countdown = setInterval(() => {
                                    const now = new Date();
                                    const dist = dueTime - now;
                                    if (dist <= 0) {
                                        clearInterval(countdown);
                                        location.reload();
                                        return;
                                    }

                                    const days = Math.floor(dist / (1000 * 60 * 60 * 24));
                                    const hours = Math.floor((dist % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                                    const minutes = Math.floor((dist % (1000 * 60 * 60)) / (1000 * 60));
                                    const seconds = Math.floor((dist % (1000 * 60)) / 1000);

                                    // Display the result in the element with id="demo"
                                    timeout.innerHTML = `${dist > (1000 * 60 * 60 * 24) ? (days + "d ") : ""}${dist > (1000 * 60 * 60) ? hours + "h " : ""}${dist > (1000 * 60) ? minutes + "m " : ""}${seconds}s`;
                                }, 1000)
                            </script>
                        </div>
                    }
                }
            }

        </div>
        <div class="col-lg-12">
            <p class="mt-5 fw-bold">Answer Histories</p>

            @{
                var competitionDayList = Model.CompetitionSessions.GroupBy(x => x.DayNumber).Select(x => new
                {
                    DayNumber = x.Key,
                    Sessions = x.Select(y => new
                    {
                        y.ID,
                        y.Name,
                        y.StartDateTime,
                        y.EndDateTime
                    }).OrderBy(y => y.StartDateTime).ToList()
                }).ToList();

                @for (int i = 0; i < competitionDayList.Count; i++)
                {
                    var competitionDay = competitionDayList[i];

                    <div class="card mt-3">
                        <div class="card-body">
                            <a class="d-flex align-items-center justify-content-between text-decoration-none text-black" data-bs-toggle="collapse" href="#collapseDay@(competitionDay.DayNumber)" role="button" aria-expanded="false" aria-controls="collapseDay@(competitionDay.DayNumber)">
                                <span>Day @competitionDay.DayNumber</span>
                                <i class="bx bx-chevron-down fs-4 text-primary"></i>
                            </a>

                            <div class="collapse mt-3" id="collapseDay@(competitionDay.DayNumber)">
                                @foreach (var session in competitionDay.Sessions)
                                {
                                    var competitorUploadedFile = Model.CompetitorUploadedFiles.Where(x => x.CompetitionSessionID == session.ID).OrderByDescending(x => x.CreatedAt).FirstOrDefault();

                                    <div class="ms-3 mb-3">
                                        <p class="fw-bold">
                                            @session.Name
                                            <span class="text-muted fw-normal">(@session.StartDateTime.ToString("dd MMM yyyy HH:mm") - @session.EndDateTime.ToString("dd MMM yyyy HH:mm"))</span>
                                        </p>

                                        @if (competitorUploadedFile != null)
                                        {
                                            var listExtract = Model.CompetitorAnswerHistory.Where(x => x.CompetitionSessionID == competitorUploadedFile.CompetitionSessionID).First().UploadedFileZipExtractList;

                                            <div class="d-flex justify-content-between ms-3 pe-3">
                                                <span class="d-inline-flex">@competitorUploadedFile.FileName</span>
                                                <span class="d-inline-flex text-muted fst-italic">Last Uploaded (@competitorUploadedFile.CreatedAt)</span>
                                            </div>

                                            <div class="ms-3 mt-3">
                                                <ul class="list-group mt-2 me-3">
                                                    @{
                                                        string huminizerSize(long size)
                                                        {
                                                            if (size > 1024 * 1024)
                                                            {
                                                                return $"{size / (1024 * 1024)}M";
                                                            }
                                                            else if (size > 1024)
                                                            {
                                                                return $"{size / (1024)}K";
                                                            }
                                                            else
                                                            {
                                                                return size.ToString();
                                                            }
                                                        }
                                                        try
                                                        {
                                                            using var zipfile = ZipFile.OpenRead(System.IO.Path.Combine(Directory.GetCurrentDirectory(), "File", competitorUploadedFile.FileName));
                                                            foreach (var itemExtract in zipfile.Entries)
                                                            {
                                                                <li class="mb-0 list-group-item d-flex justify-content-between align-items-start">
                                                                    <div>@itemExtract.FullName</div>
                                                                    <span class="badge bg-primary rounded-pill">@huminizerSize(itemExtract.CompressedLength) / @huminizerSize(itemExtract.Length)</span>
                                                                </li>
                                                            }
                                                        }
                                                        catch (FileNotFoundException)
                                                        {
                                                            <li class="mb-0 list-group-item">
                                                                Not found.
                                                            </li>
                                                        }
                                                    }

                                                </ul>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="row ms-3">
                                                <span class="text-muted fw-light fst-italic">No history</span>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    @if (TempData["ErrorMessage"] != null)
    {
        <script>
            alert('@TempData["ErrorMessage"]');
        </script>
    }
</div>


@*<table class="table">
    <thead>
    <tr>
    </tr>
    </thead>
    <tbody>
            @foreach(string a in Model.strings) {
                <tr>
                    <td>@a</td>
                </tr>
            }
    </tbody>
</table>*@
